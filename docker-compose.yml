# ============================================================
# Docker Compose 설정 파일
# 투비네트웍스 글로벌 - CS AI 에이전트 프로젝트
# 
# 2025-10-01 23:00, Claude 작성
#
# 이 파일은 AI 에이전트에 필요한 모든 인프라를 한 번에 관리합니다.
# ============================================================

version: '3.8'

services:
  # ============================================================
  # Weaviate - Vector Database (의미 검색용)
  # ============================================================
  # Weaviate는 FAQ와 제품 정보를 벡터로 저장하고,
  # 고객 문의와 유사한 내용을 빠르게 찾아주는 역할을 합니다.
  #
  # 포트 변경 이유:
  # Spring 서버가 8080을 사용하고 있어서, Weaviate는 8081로 변경했습니다.
  # 컨테이너 내부에서는 여전히 8080 포트를 사용하지만,
  # 외부(당신의 Windows)에서는 8081로 접속합니다.
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: csai-weaviate
    ports:
      - "8081:8080"  # 호스트:컨테이너 (Spring의 8080과 충돌 방지)
    environment:
      # 기본 쿼리 결과 제한 (한 번에 최대 25개까지 반환)
      QUERY_DEFAULTS_LIMIT: 25
      
      # 인증 없이 접근 허용 (개발 환경용, 프로덕션에서는 변경 필요)
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      
      # 데이터 저장 경로
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      
      # 기본 벡터화 모듈 없음 (우리가 Sentence-BERT로 직접 벡터 생성)
      DEFAULT_VECTORIZER_MODULE: 'none'
      
      # CUDA 지원 활성화 (RTX 3050 GPU 활용)
      ENABLE_CUDA: 'true'
    volumes:
      # 볼륨을 사용하면 컨테이너를 삭제해도 데이터가 보존됩니다
      - weaviate_data:/var/lib/weaviate
    networks:
      - csai-network
    restart: unless-stopped  # 컴퓨터 재시작 시 자동 실행

  # ============================================================
  # MongoDB - NoSQL Database (구조화된 데이터 저장용)
  # ============================================================
  # MongoDB는 제품 정보, 고객 정보, FAQ 원본 등을 저장합니다.
  # Weaviate가 "책 찾는 사서"라면, MongoDB는 "실제 책장"입니다.
  mongodb:
    image: mongo:7.0
    container_name: csai-mongodb
    ports:
      - "27017:27017"  # MongoDB 기본 포트 (충돌 가능성 낮음)
    environment:
      # 관리자 계정 설정
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: csai_admin_2025
      
      # 초기 데이터베이스 생성
      MONGO_INITDB_DATABASE: csai
    volumes:
      # MongoDB 데이터 영속성 보장
      - mongodb_data:/data/db
      
      # 초기 설정 스크립트가 필요하면 여기에 추가
      # - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - csai-network
    restart: unless-stopped

  # ============================================================
  # Redis - Cache & Session Store (빠른 임시 저장소)
  # ============================================================
  # Redis는 자주 조회되는 데이터를 메모리에 캐싱하여 속도를 높입니다.
  # 예: AI가 생성한 답변을 임시 저장, API 응답 캐싱 등
  redis:
    image: redis:7-alpine
    container_name: csai-redis
    ports:
      - "6379:6379"  # Redis 기본 포트
    command: redis-server --appendonly yes  # AOF 영속성 활성화
    volumes:
      # Redis 데이터 백업
      - redis_data:/data
    networks:
      - csai-network
    restart: unless-stopped

# ============================================================
# Volumes (데이터 영속성)
# ============================================================
# 볼륨을 사용하면 컨테이너를 삭제하거나 재시작해도 데이터가 유지됩니다.
# Docker가 자동으로 관리하며, 백업이나 마이그레이션도 쉽습니다.
volumes:
  weaviate_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# ============================================================
# Networks (컨테이너 간 통신)
# ============================================================
# 같은 네트워크에 있는 컨테이너끼리는 컨테이너 이름으로 통신할 수 있습니다.
# 예: Python에서 MongoDB에 접속할 때 'mongodb://mongodb:27017' 사용 가능
networks:
  csai-network:
    driver: bridge
